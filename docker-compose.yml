services:
  server:
    build: .
    ports:
      - ${SERVER_PORT:-8000}:${SERVER_PORT:-8000}
    volumes:
      - ./app:/auth-py/app
    restart: always
    environment:
      # SERVER SETTINGS
      SERVER_PORT: $SERVER_PORT

      # DATABASE SETTINGS
      DATABASE_URI: postgresql+asyncpg://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres:$POSTGRES_PORT/$POSTGRES_DB

      # REDIS SETTINGS
      REDIS_URI: redis://redis:$REDIS_PORT

      # EMAIL SETTINGS
      SMTP_HOST: $SMTP_HOST
      SMTP_PORT: $SMTP_PORT
      SMTP_USER: $SMTP_USER
      SMTP_PASSWORD: $SMTP_PASSWORD
      SMTP_FROM_EMAIL: $SMTP_FROM_EMAIL

      # JWT SETTINGS
      JWT_SECRET: $JWT_SECRET
      JWT_ACCESS_TOKEN_TTL_SECS: $JWT_ACCESS_TOKEN_TTL_SECS
      JWT_REFRESH_TOKEN_TTL_SECS: $JWT_REFRESH_TOKEN_TTL_SECS

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${SERVER_PORT:-8000}/health" ]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  postgres:
    image: postgres:17.3-alpine3.21
    container_name: postgres
    restart: always
    ports:
      - $POSTGRES_PORT:$POSTGRES_PORT
    environment:
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: $POSTGRES_DB
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "$POSTGRES_USER", "-d", "$POSTGRES_DB" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.4.2-alpine3.21
    container_name: redis
    restart: always
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:
